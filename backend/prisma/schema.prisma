// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id // DiscordId
  createdAt   DateTime      @default(now())
  private     Boolean       @default(false)
  userWallets UserWallet[]
  uuid        Uuid[]
  assetCounts AssetCounts[]
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  wallet    String   @unique
  assets    Int[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Uuid {
  uuid      String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id            Int      @id @default(autoincrement())
  name          String
  creatorName   String
  guildId       String
  holderRoleId  String
  verifyChannel String
  featuredAsset Int
  inviteLink    String
  specialAmount Int?
  specialRoleId String?
  status        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  projectAssets     ProjectAssets[]
  assetCounts       AssetCounts[]
  application       Application[]
  creatorWallets    CreatorWallet[]
  blacklistedAssets BlacklistedAsset[]

  @@unique([guildId, name])
}

model CreatorWallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  wallet    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, wallet])
}

model BlacklistedAsset {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  assetId   Int

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Application {
  id            Int      @id @default(autoincrement())
  wallet        String
  transactionId String
  projectId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectAssets {
  id        Int      @id @default(autoincrement())
  projectId Int
  assetId   Int
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model AssetCounts {
  id        Int      @id @default(autoincrement())
  userId    String
  projectId Int
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}
